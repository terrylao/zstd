unit ZSTD_DECOMPRESS_INTERNAL;
interface

{-*******************************************************
 *  Dependencies
 ********************************************************}
uses //mem,             { BYTE, smallint, Uint32 }
 zstd_internal,zstd,xxHash,ZSTD_DDICT;   { ZSTD_seqSymbol }


const
{-*******************************************************
 *  Constants
 ********************************************************}
  LL_base:array[0..MaxLL] of uint32 = (
                 0,    1,    2,     3,     4,     5,     6,      7,
                 8,    9,   10,    11,    12,    13,    14,     15,
                16,   18,   20,    22,    24,    28,    32,     40,
                48,   64, $80, $100, $200, $400, $800, $1000,
                $2000, $4000, $8000, $10000 );

  OF_base:array[0..MaxOff] of uint32 = (
                 0,        1,       1,       5,     $D,     $1D,     $3D,     $7D,
                 $FD,   $1FD,   $3FD,   $7FD,   $FFD,   $1FFD,   $3FFD,   $7FFD,
                 $FFFD, $1FFFD, $3FFFD, $7FFFD, $FFFFD, $1FFFFD, $3FFFFD, $7FFFFD,
                 $FFFFFD, $1FFFFFD, $3FFFFFD, $7FFFFFD, $FFFFFFD, $1FFFFFFD, $3FFFFFFD, $7FFFFFFD );

  OF_bits:array[0..MaxOff] of uint32 = (
                     0,  1,  2,  3,  4,  5,  6,  7,
                     8,  9, 10, 11, 12, 13, 14, 15,
                    16, 17, 18, 19, 20, 21, 22, 23,
                    24, 25, 26, 27, 28, 29, 30, 31 );

  ML_base:array[0..MaxML] of uint32 = (
                     3,  4,  5,    6,     7,     8,     9,    10,
                    11, 12, 13,   14,    15,    16,    17,    18,
                    19, 20, 21,   22,    23,    24,    25,    26,
                    27, 28, 29,   30,    31,    32,    33,    34,
                    35, 37, 39,   41,    43,    47,    51,    59,
                    67, 83, 99, $83, $103, $203, $403, $803,
                    $1003, $2003, $4003, $8003, $10003 );

type



{-*******************************************************
 *  Shared internal functions
 ********************************************************}

{! ZSTD_loadDEntropy() :
 *  dict : must point at beginning of a valid zstd dictionary.
 * @return : size of dictionary header (size of magic number + dict ID + entropy tables) }


{! ZSTD_checkContinuity() :
 *  check if next `dst` follows previous position, where decompression ended.
 *  If yes, do nothing (continue on current segment).
 *  If not, classify previous segment as 'external dictionary', and start a new segment.
 *  This function cannot fail. }
implementation

end.
